Operations:
sa - swap top 2 elem of A / NA if 1 or 0
sb - swap top 2 elem of B / NA if 1 or 0
ss - swap top 2 elem of both / NA if 1 or 0

pa - move top elem of B to A / NA if !B
pb - move top elem of A to B / NA if !A

ra - Shift all elem of A up by 1
rb - Shift all elem of B up by 1
rr - Shift all elem of both up by 1

rra - Shift all elem of A down by 1
rrb	- Shift all elem of B down by 1
rrr	- Shift all elem of both down by 1

Basic principles of sorting

Creat circular linked list for both stacks, so rotate ops work.

Ideally, stack B should be created in inverted pyramid format, so that 'pa' efficiently stacks them back big to small

Superlative (biggest or smallest) numbers from stack A should correctly be placed next to B's superlative numbers, e.g. A 1 should be put above B's largest number (4, 3, 2), so 'rb' sorts it with 1 operation.


